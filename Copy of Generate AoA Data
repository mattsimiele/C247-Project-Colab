{"cells":[{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')\n","%cd /content/drive/MyDrive/\n","\n","%cd C247_Project\n","%ls -a"],"metadata":{"id":"NxbZLDldGFqd","executionInfo":{"status":"ok","timestamp":1678851352066,"user_tz":240,"elapsed":1514,"user":{"displayName":"MATTHEW SIMIELE","userId":"16518982574962257704"}},"outputId":"8f682ed6-28b2-4b9a-e3c2-17c915e8b80e","colab":{"base_uri":"https://localhost:8080/"}},"id":"NxbZLDldGFqd","execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n","/content/drive/MyDrive\n","/content/drive/MyDrive/C247_Project\n"," AngleEstimationTutorial.ipynb   \u001b[0m\u001b[01;34mdichasus\u001b[0m/   \u001b[01;34mmodels\u001b[0m/              \u001b[01;34mutils\u001b[0m/\n","'Dataset Links.gdoc'             \u001b[01;34mdoatools\u001b[0m/  \u001b[01;34m'Papers from IEEE'\u001b[0m/\n"," \u001b[01;34mData_Sets\u001b[0m/                      \u001b[01;34m.git\u001b[0m/       \u001b[01;34mrad_sdk\u001b[0m/\n"]}]},{"cell_type":"code","source":["import numpy as np\n","import doatools.model as model\n","import doatools.estimation as estimation\n","import doatools.performance as perf\n","import matplotlib.pyplot as plt\n","%matplotlib inline"],"metadata":{"id":"JefBSEiHtOO-"},"id":"JefBSEiHtOO-","execution_count":null,"outputs":[]},{"cell_type":"code","source":["wavelength = 1.0 # normalized\n","d0 = wavelength / 2\n","\n","# Create a 12-element ULA.\n","# uca = model.UniformRectangularArray(4,8, d0)\n","# uca = model.UniformCircularArray(4,d0)\n","# uca = model.UniformCircularArray(32,d0)\n","uca = model.UniformLinearArray(32,d0)\n","uca = uca.get_perturbed_copy({\n","    # Here True means the location errors are known in prior.\n","    # Because we are not doing estimations here, you can ignore it.\n","    'location_errors': (np.random.randn(uca.size, 2) * 0.05, True)\n","})\n","# Place 8 sources uniformly within (-pi/3, pi/4)\n","sources = model.FarField1DSourcePlacement(\n","    np.linspace(-np.pi/3, np.pi/4, 1)\n",")\n","# All sources share the same power.\n","power_source = 1 # Normalized\n","source_signal = model.ComplexStochasticSignal(sources.size, power_source)\n","# 200 snapshots.\n","n_snapshots = 200\n","# We use root-MUSIC.\n","estimator = estimation.RootMUSIC1D(wavelength)"],"metadata":{"id":"ME5tX3jkpXw2"},"id":"ME5tX3jkpXw2","execution_count":null,"outputs":[]},{"cell_type":"code","source":["snrs = np.linspace(-30, 5, 10)\n","# angles = np.linspace(-.95*np.pi, .95*np.pi, 360)\n","angles = np.linspace(-np.pi/3, np.pi/3, 20)\n","n_repeats = 90\n","n_snapshots = 512\n","number_samples = snrs.shape[0] * angles.shape[0] * n_repeats"],"metadata":{"id":"wEtYjL0cpv8v"},"id":"wEtYjL0cpv8v","execution_count":null,"outputs":[]},{"cell_type":"code","source":["RS = np.zeros((number_samples, 1, 1, 2))\n","RY = np.zeros((number_samples, 32, 32, 2))\n","S_out = np.zeros((number_samples, 1, n_snapshots, 2))\n","Y_out = np.zeros((number_samples, 32, n_snapshots, 2))\n","SNR = np.zeros((number_samples))\n","Angle = np.zeros((number_samples))\n","k = 0\n","for angle in angles:\n","  angle_source = np.array([angle])\n","  sources = model.FarField1DSourcePlacement(angle_source)\n","  source_signal = model.ComplexStochasticSignal(sources.size, power_source)\n","  for i, snr in enumerate(snrs):\n","      power_noise = power_source / (10**(snr / 10))\n","      noise_signal = model.ComplexStochasticSignal(uca.size, power_noise)\n","      for r in range(n_repeats):\n","          # Stochastic signal model.\n","          A = uca.steering_matrix(sources, wavelength)\n","          S = source_signal.emit(n_snapshots)\n","          N = noise_signal.emit(n_snapshots)\n","          Y = A @ S + N\n","          Rs = (S @ S.conj().T) / n_snapshots\n","          Ry = (Y @ Y.conj().T) / n_snapshots\n","          \n","          RS[k,:,:,0] = Rs.real; RS[k,:,:,1] = Rs.imag\n","          RY[k,:,:,0] = Ry.real; RY[k,:,:,1] = Ry.imag;\n","          S_out[k,:,:,0] = S.real; S_out[k,:,:,1] = S.imag\n","          Y_out[k,:,:,0] = Y.real; Y_out[k,:,:,1] = Y.imag\n","          SNR[k] = snr\n","          Angle[k] = angle\n","          k+=1"],"metadata":{"id":"ZN55rHYpwNCz"},"id":"ZN55rHYpwNCz","execution_count":null,"outputs":[]},{"cell_type":"code","source":["sample_ind = np.arange(number_samples)\n","# total_samples = int(number_samples/2 + number_samples/10)\n","total_samples = int(sample_ind.shape[0])\n","sample_grabs = np.random.choice(sample_ind, size = (total_samples), replace=False)"],"metadata":{"id":"b29xFbNHFw6O"},"id":"b29xFbNHFw6O","execution_count":null,"outputs":[]},{"cell_type":"code","source":["train = {}\n","val = {}\n","test = {}\n","\n","train_ind_end = int((4/6)*sample_grabs.shape[0])\n","val_ind_end = int((5/6)*sample_grabs.shape[0])\n","\n","train_ind = sample_grabs[0:train_ind_end-1]\n","val_ind = sample_grabs[train_ind_end:val_ind_end-1]\n","test_ind = sample_grabs[val_ind_end:]\n","\n","train['SNR'] = SNR[train_ind]\n","train['AoA'] = Angle[train_ind]\n","train['Rs'] = RS[train_ind,:,:]\n","train['Ry'] = RY[train_ind,:,:]\n","train['S'] = S_out[train_ind,:,:]\n","train['Y'] = Y_out[train_ind,:,:]\n","\n","val['SNR'] = SNR[val_ind]\n","val['AoA'] = Angle[val_ind]\n","val['Rs'] = RS[val_ind,:,:]\n","val['Ry'] = RY[val_ind,:,:]\n","val['S'] = S_out[val_ind,:,:]\n","val['Y'] = Y_out[val_ind,:,:]\n","\n","test['SNR'] = SNR[test_ind]\n","test['AoA'] = Angle[test_ind]\n","test['Rs'] = RS[test_ind,:,:]\n","test['Ry'] = RY[test_ind,:,:]\n","test['S'] = S_out[test_ind,:,:]\n","test['Y'] = Y_out[test_ind,:,:]\n","\n","del SNR, Angle, RS, RY, S_out, Y_out"],"metadata":{"id":"81lgyjSyRssO"},"id":"81lgyjSyRssO","execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pickle\n","\n","with open('./Data_Sets/sim_2_ula_per_train_data.pkl', 'wb') as fp:\n","    pickle.dump(train, fp)\n","    print('dictionary saved successfully to file')\n","with open('./Data_Sets/sim_2_ula_per_val_data.pkl', 'wb') as fp:\n","    pickle.dump(val, fp)\n","    print('dictionary saved successfully to file')\n","with open('./Data_Sets/sim_2_ula_per_test_data.pkl', 'wb') as fp:\n","    pickle.dump(test, fp)\n","    print('dictionary saved successfully to file')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VDT7Azx3WCe_","executionInfo":{"status":"ok","timestamp":1678851426850,"user_tz":240,"elapsed":22503,"user":{"displayName":"MATTHEW SIMIELE","userId":"16518982574962257704"}},"outputId":"68a1483f-053c-4650-9609-8eb50f4dbbb9"},"id":"VDT7Azx3WCe_","execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["dictionary saved successfully to file\n","dictionary saved successfully to file\n","dictionary saved successfully to file\n"]}]}],"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.9.9"},"vscode":{"interpreter":{"hash":"11938c6bc6919ae2720b4d5011047913343b08a43b18698fd82dedb0d4417594"}},"colab":{"provenance":[{"file_id":"1Tn1YyHdb_LFkygqQBqLmlSiB9FFtdmjl","timestamp":1678487365160},{"file_id":"https://github.com/mattsimiele/C247-Project-Colab/blob/master/AngleEstimationTutorial.ipynb","timestamp":1677960260761}]},"accelerator":"GPU","gpuClass":"standard"},"nbformat":4,"nbformat_minor":5}